<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[生活与学习]]></title>
    <url>%2F2019%2F01%2F09%2F%E7%94%9F%E6%B4%BB%E4%B8%8E%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[必须的学习与工作学习的目的不是为了更高的工资、更好的社会地位，只是为了满足自己的好奇心，为了自己大脑继续成长… 要认真生活，甚至享受孤独！ 认真生活 做任何事情都不能“全职”，因为这样你就没办法成长了，你必须将大量的时间花在生活上、其他的工作上以及学习上。 成功交易者的基本素质在任何时候都持有一定比例（或者起码一定数量的“现金”），因为这个世界没有救世主，只有自己准备好的风险备用金。 让自己知道，自己最需要的，除了现金外，就是自己的成长 无论“现金”、时间还是生活都绝对不可以 ALL-IN（全身投入）,因为有风险！ 享受孤独 在独自一人的时候，没有“表现”“表演”的刻意或者需求。而人在被观察的时候都会动作变形——这也是为什么国际台球比赛选手在家里随随便便都可以打个满贯，到了国际决赛的时候，想打出个满贯就没那么随便那么容易了的原因，因为他们所体会到的外部观察影响了他们的行动。 最近很长时间以来，原本有很多的事情等着我去做，但我却选择性的做那么几件。原因很简单，但我今天才意识到，我在害怕，害怕停滞不前，害怕自己不再成长。因为若是不再成长，我将无法应对接下来的挑战… 失败并不可怕，可怕的是面对失败的无能为力！ 总结所以除了享受孤独之外还要又很好的生活。好生活可不是放在那里就可以的，是需要经营、培养、经营的，除了生活还有又工作，无论什么样的工作，只要做到了，就有一定的成长，有新的境界！ 做全职工作本质是很危险的（离开了它你或许就什么都不是了），而大脑重塑虽然可能。但是一旦长期塑造之后，在想逆转，会非常非常艰难。 今天的感悟来自一本书，哈哈，书名就不告知了，但感谢它！]]></content>
      <tags>
        <tag>生活</tag>
        <tag>总结</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS7简易搭建SS方法]]></title>
    <url>%2F2018%2F12%2F10%2FCentOS7%E7%AE%80%E6%98%93%E6%90%AD%E5%BB%BASS%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[SS搭建教程 本篇文章教你如何自建服务器搭建ShadowSocks 开启魔法上网，相信点开这篇文章的小伙伴都懂，这里就不多介绍了 服务器的购买这里推荐 Vultr 和 搬瓦工 都比较不错，支持支付宝支付，至于注册于购买这里就不多聊，有需要的可以去Google看看，或者可以看看于文章底部我转载的一个链接，里面有Vultr的搭建方法超详细的讲解。 测试服务器购买完成后首先得测试一下是否可用Windows 先 win + R 输入 cmd,弹出一个黑窗口后在里面输入 ping 你的IP地址 VPS 的使用首先下载 Shell，这里使用 Xshell连接至你的VPS主机 搭建 SS安装依赖包在Xshell的控制台中输入：12curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot;python get-pip.py 安装ShadowSocks12pip install --upgrade pippip install shadowsocks 创建ShadowSocks配置文件1pip install shadowsocks 单端口 123456&#123; &quot;server&quot;: &quot;0.0.0.0&quot;, &quot;server_port&quot;: 2018, &quot;password&quot;: &quot;12345678&quot;, &quot;method&quot;: &quot;aes-256-cfb&quot;&#125; 多端口 1234567891011&#123; &quot;server&quot;: &quot;0.0.0.0&quot;, &quot;port_password&quot;: &#123; &quot;8381&quot;: &quot;password1&quot;, &quot;8382&quot;: &quot;password2&quot;, &quot;8383&quot;: &quot;password3&quot;, &quot;8384&quot;: &quot;password4&quot; &#125;, &quot;timeout&quot;: 300, &quot;method&quot;: &quot;aes-256-cfb&quot;&#125; 配置防火墙1systemctl stop firewalld.service 启动ShadowSocks服务1ssserver -c /etc/shadowsocks.json -d start 到这里配置以及完成了如果想要关闭ShadowSocks，可以使用1ssserver -c /etc/shadowsocks.json -d stop 感谢本文学习于以下链接，用于知识记录，它视乎也是转载的，有需要的可以去看看！ https://www.itwordsweb.com/212.html]]></content>
      <tags>
        <tag>SS搭建</tag>
        <tag>魔法上网</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何判断自己是否学会了一个知识点]]></title>
    <url>%2F2018%2F12%2F02%2F%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E8%87%AA%E5%B7%B1%E6%98%AF%E5%90%A6%E5%AD%A6%E4%BC%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E7%9F%A5%E8%AF%86%E7%82%B9%2F</url>
    <content type="text"><![CDATA[费曼技巧：很好的学习方法 当老师讲解知识点的时候，或者自学的时候，如何判断自己是否已经学会了该知识点呢？本篇文章介绍一个，个人觉得有用的学习方法，费曼学习法！ 导语据说这种学习方法是有物理学家 R.P.Feynman 提出的，所以叫费曼技巧。费曼技巧的核心是以教促学，特点是对学习的内容进行比较深入的理解。例如：高中老师讲的题，谁最清楚谁最了解情形！无疑是你的高中老师，而本篇文章也是我在用费曼技巧来讲述费曼技巧，哈哈哈！ 简单概述当你和你的朋友在学习同一个知识点的时候，如果你学完了，并且完成了任务。随后你的朋友来求助于你，如果你很轻松的就解决了该问题，并给他通俗易懂的语言解释清楚了原由，那么该知识点你目前基本是会了。如果发现在讲述的过程中自己也没有办法讲通，这说明你对该知识点还没有得到很好的理解，还需要重新学习这个知识点，并试图理解讲述不好的部分！以此循环，知道你能完成讲述出来为止。 具体罗列 根据学习材料来学习 “费曼技巧”，如果反省没有理解学习材料，那你就需要重读学习材料或者请教同学或者老师，直到自己认为自己已经了解了所学类容。 假象你要为一个没有学习过“费曼技巧”的同学讲解它。你首先得告诉他学习主题“费曼技巧”，然后把学习内容以讲解的方式书写出来，并试图让一个没有学习过“费曼技巧”的同学听懂 在第二步的过程中，你如果发现自己无法讲通，这说明你对学习材料的这一部分没有很好的理解。此时，你需要重新学习整个材料，并试图理解讲不好的部分，然后重复第二步，知道你能完整的讲解学习材料 找一个人来听你的讲解，并且他会对不容易理解的部分提问。当你试图回答他的提问时，正是你深入理解的过程。 感谢学习完之后，输出的方式有很多，如：跟别人讲述，写博客都可以，写不出来了怎么办，只能滚回去学习咯！ 本篇文字学习至一下文章，如有侵权，请联系删除！ 感谢知乎 教与学的故事]]></content>
      <tags>
        <tag>学习方法</tag>
        <tag>高效学习</tag>
        <tag>小技巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown用于写作的轻量级语言]]></title>
    <url>%2F2018%2F12%2F01%2FMarkdown%E7%94%A8%E4%BA%8E%E5%86%99%E4%BD%9C%E7%9A%84%E8%BD%BB%E9%87%8F%E7%BA%A7%E8%AF%AD%E8%A8%80%2F</url>
    <content type="text"><![CDATA[Markdown 简易入门教程 Markdown 是一款轻量级的标记语言，排版语法简洁,让你更多的专注于文章的内容而非排版样式。 什么是 Markdown ? 在之前的导语中提到，Markdown 是一种用来写作的轻量级 [标记语言] ，它使用简介的语法代替排版，而不是像 Word 等文字处理软件有大量的排版、字体设置。并且其由纯文本编写，所以兼容性极强，所有文本编辑器都可以打开，还能轻松的转换为HTML、PDF等格式。 使用Markdown的优点 更专注于文字内容而不是排版样式，安心写作。 轻松导出 HTML、PDF等文件。 纯文本类容，兼容所有的文本编辑器。 标记语法极好的可读、直观性，学习成本低。 Markdown 编辑器 如果你是一名 Coder 的话，那就用你的编辑器就好了，最多装个插件或者试试 Typora。而如果你是一名编辑作者的话，那么你可以先试试在线的编辑器如：简书 在线编辑器 GitHub 简书 Windows MarkdownPad MarkPad Cmd Markdown Typora Mac Mou Typora MacDown Ulysses 跨平台(需要插件) Atom Sublime Text Visual Studio Code Markdown 基本语法标题 语法123456# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 总共 1-6级标题注意 # 后面有一个空格 样式 列表 有序列表 语法使用 数字加上 . 就是一个有序列表，同时也需要注意后面也有一个空格 121. 有序列表2. 有序列表 样式注意！有空格的才是有序列表，没有空格的不是只是类似的普通字符而已，如图，一个可选中，一个不行！有空格没有空格 无序列表 语法使用 - + * 都可以生成无序列表，一般推荐嵌套顺序为 - + * 逐步向内 123456- 无序列表+ 无序列表* 无序列表- 无序列表 + 无序列表 * 无序列表 样式 引用使用 > 来引用一句话，每一段需要一个 > 当然可能有些软件的渲染即使没有 > 号只要没有多余的换行也会渲染，不过为了兼容性，还是推荐每一行加上一个 > 语法 123&gt; We believe that writing is about content, about what you want to say – not about fancy formatting.&gt; 我们坚信写作写的是内容，所思所想，而不是花样格式。&gt; — Ulysses for Mac 样式 We believe that writing is about content, about what you want to say – not about fancy formatting.我们坚信写作写的是内容，所思所想，而不是花样格式。— Ulysses for Mac 图片与链接进行写作的时候，有时候需要引入图片怎么办？别怕，Markdown 支持本地引入图片，同时也支持引入在线图片，语法共有两种。一种是普通引用直接上链接即可。还有一种类似于变量的引用方式，这里叫它标识引用，语法如下 图片 语法Title是什么？当鼠标悬浮在图片上出现的文字叫做Title，无论哪一种Title都可写可不写链接的 Title 可以使用双引号、单引号、圆括号包裹起来，这里使用双引号示范 1234567891011普通引用![](图片路径 "Title")![Google](https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png "Google")标识引用![][标识名称]![Google][Google][Google]: https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png "Google"这里的链接辨别标识可以是字母、数字、空白和标点符号，但是不区分大小写![Google][Google]![Google][google]因此这两个链接是一样的 样式普通引用(行类式)标识引用(参考式) 超链接超链接和图片链接是类似的，同样有两种形式：普通引用、标识引用，只不过超链接前面少一个感叹号 !，这里就不多介绍了 语法 1[显示文本](链接路径 "Title") 样式 Rubik’s Blog 粗体与斜体 粗体 语法 12**粗体**__粗体__ 样式粗体1粗体2 斜体 语法 12*斜体*_斜体_ 样式斜体_斜体_ 代码块``` 包裹起来就是一个代码块后面可以跟上其的语言名称来显示对应的代码高亮，当然也可以不写 语法 样式 123function sayHello () &#123; console.log('Hello!')&#125; 表格 语法表格可以这样书写，使用 : 来标识对其方向 --- 上面的是表头 :号在 ---左面就是左对齐，右边就是右对齐，两边都写就是居中12345| id | name | score || --- | :---: | ---: || 001 | Mark | 90 || 002 | Ford | 80 || 003 | Alan | 95 | 样式 id name score 001 Mark 90 002 Ford 80 003 Alan 95 分割线在同一行中使用三个以上的星号、减号、下划线，都可以成为一条分割线 语法 123***___*** 样式 感谢本篇文章整理于其他文章仅仅用于个人纪录，侵权请联系删除！ 感谢以下文章及文章作者HuiHut少数派简书SegmentFault]]></content>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js的多版本方法NVM]]></title>
    <url>%2F2018%2F11%2F30%2FNode.js%E7%9A%84%E5%A4%9A%E7%89%88%E6%9C%AC%E6%96%B9%E6%B3%95NVM%2F</url>
    <content type="text"><![CDATA[NVM 快速入门 如果你使用 Node.js ，有时想快速更新 Node.js 版本快速切换 Node.js 版本，而不知道怎么做？本篇文章教你如何使用 NVM 安装管理多个版本的NodeJS 引子 安装Node的方式目前有两种 从官网获取安装 就是从官网下载然后安装，也是安装NodeJS最简单的方式 每次更新 NodeJS 版本都需要重新去官网下载覆盖安装 系统中只能存在一个版本的 NodeJS，不适合对比学习 使用版本管理器安装 这里使用 nvm 就是为了解决上述问题，其他的就不多介绍了，这里引入一篇博文进行一些科普 安装 NVM安装前准备 将原有的 Node.js 卸载掉 建立两个空文件夹 Nvm 与 NodeJS 文件夹名称可以随意但为了以后方便查找，就需要一个有意义的命名，而且建议这两个目录的父级目录不要包含中文与空格 安装进入NVM GitHub 地址 下载 nvm-noinstall.zip 下载好之后的到一个压缩包，将其解压在一之前建立的 Nvm 目录中，然后使用管理员权限运行 install.cmd 之后会弹出一个命令行窗口，直接 Enter (也就是回车键) 随后会弹出一个文本文件，将里面的内容复制，然后全部关掉 在 Nvm 目录下建立一个 settings 的纯文本文件(就是.txt文件) 然后用记事本打开将之前复制的内容粘贴进去, 并且 root 后面添加上 Nvm 目录的绝对路径，在 path 后面添加上之后NodeJS安装目录的据对路径(就是之前上面创建的那个 NodeJS 目录) 保存关闭 环境变量配置 右键 我的电脑 打开如下界面，并点击高级系统设置 找到环境变量，点击进入 找到系统变量版面，新建两个系统变量 NVM_HOME 与 NVM_SYMLINK 它们的值分别对应之前的 root 与 path 也就是 Nvm 与 NodeJS 目录的绝对路径，新建完成后，点击 Path 进入另一个面板 在新建两个 Path 变量 %NVM_HOME% 与 %NVM_SYMLINK% 也就是之前新建的那个两个系统变量，不过注意两边的百分号不能少，这两个百分号的意思大概是引用外面那两个的路径，也就是说这里你要可以直接 写 Nvm 与 NodeJS 目录的绝对路径 为了方便维护，这里写为 %NVM_HOME% 与 %NVM_SYMLINK% ,记住百分号不能少 然后一路确定下去就 OK 了！ 测试NVM 已经安装完成了 这里来测试一下是否安装成功 打开终端(命令行窗口) 输入 nvm version 或者 nvm v 只要不出现不是内部或外部命令就成功了 NVM 常用命令 使用 nvm 下载 好 Node.js 后记得测试一下，使用 node use [指定版本号] 使用指定的版本然后使用 node -v 与 npm -v 检查一下是否成功，如果提示不是内部或外部命令，就需要将其卸载掉重装一般常用的命令就 nvm list nvm install [指定版本号] nvm uninstall [指定版本号] nvm use [指定版本号] nvm list 或者 nvm ls 查看已安装 Node 如果为No installations recognized.表示Nvm当前没有安装管理的node.js，如果有多个 NodeJS且其中一个前面有一个星号 * 表示当前正在使用的 NodeJS版本 nvm list 或者 nvm ls nvm use [指定Node.js版本号] 使用指定 NodeJS 版本 nvm use 8.12.0 nvm install [指定Node.js版本号] 下载指定 NodeJS 版本 nvm install 8.12.0 nvm uninstall [指定Node.js版本号] 删除指定 NodeJS 版本 nvm uninstall 8.12.0 nvm alias [别名] [指定Node.js版本号] 给指定 NodeJS 添加别名 nvm alias dev 8.12.0 nvm unalias [别名] 删除已经定义的别名 nvm unalias dev nvm reinstall-packages [指定Node.js版本号] 在当前使用的 Node 环境下，重新全局安装指定版本号的 Npm 包 nvm reinstall-packages 8.12.0 声明文章为原创，转载请注明出处，谢谢！]]></content>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
</search>
